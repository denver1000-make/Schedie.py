<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SchedulerDashboard - MQTT Schedule Monitor</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.29.0/feather.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8f9fa;
            color: #212529;
            line-height: 1.6;
        }
        
        .wr                <!-- Weekly Schedule Overview -->
                <div class="card" style="grid-column: span 3;">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i data-feather="calendar"></i>
                            Weekly Schedule Overview
                        </h5>
                        <div style="margin-left: auto; display: flex; gap: 0.5rem;">
                            <button class="btn btn-primary btn-sm" onclick="window.location.reload()">
                                <i data-feather="refresh-cw" style="width: 14px; height: 14px; margin-right: 4px;"></i>
                                Refresh
                            </button>
                            <button class="btn btn-success btn-sm" onclick="publishMessage()">
                                <i data-feather="send" style="width: 14px; height: 14px; margin-right: 4px;"></i>
                                Test MQTT
                            </button>
                        </div>
                    </div>r {
            display: flex;
            min-height: 100vh;
        }
        
        /* Sidebar */
        .sidebar {
            width: 280px;
            background: #233362;
            color: white;
            display: flex;
            flex-direction: column;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
        }
        
        .sidebar-brand {
            padding: 1.5rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            display: flex;
            align-items: center;
            font-size: 1.25rem;
            font-weight: 600;
            text-decoration: none;
            color: white;
        }
        
        .sidebar-brand .brand-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            font-size: 20px;
        }
        
        .sidebar-nav {
            flex: 1;
            padding: 1rem 0;
        }
        
        .nav-item {
            margin: 0.25rem 0;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.2s ease;
            border-radius: 0;
            margin: 0 1rem;
            border-radius: 8px;
        }
        
        .nav-link:hover,
        .nav-link.active {
            color: white;
            background: rgba(255,255,255,0.1);
        }
        
        .nav-link i {
            width: 20px;
            height: 20px;
            margin-right: 12px;
            stroke-width: 2;
        }
        
        /* Main content */
        .main {
            flex: 1;
            margin-left: 280px;
            background: #f8f9fa;
        }
        
        .topbar {
            background: white;
            border-bottom: 1px solid #e3e6f0;
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .topbar-title {
            font-size: 1.75rem;
            font-weight: 400;
            color: #5a5c69;
            margin: 0;
        }
        
        .topbar-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            color: #6c757d;
            font-size: 0.875rem;
        }
        
        .avatar {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            margin-left: 8px;
        }
        
        .content {
            padding: 1.5rem;
        }
        
        /* Cards */
        .card-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            border: 1px solid #e3e6f0;
            position: relative;
            display: flex;
            flex-direction: column;
            min-width: 0;
        }
        
        .card-header {
            padding: 1rem 1.5rem;
            background: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
            border-radius: 8px 8px 0 0;
            display: flex;
            align-items: center;
            justify-content: between;
        }
        
        .card-title {
            font-size: 1rem;
            font-weight: 600;
            color: #5a5c69;
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        .card-title i {
            margin-right: 8px;
            width: 16px;
            height: 16px;
        }
        
        .card-body {
            padding: 1.5rem;
            flex: 1;
        }
        
        .stat-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            border-left: 4px solid #4e73df;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            transition: all 0.3s;
        }
        
        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.25rem 2rem 0 rgba(58, 59, 69, 0.2);
        }
        
        .stat-card.success { border-left-color: #1cc88a; }
        .stat-card.warning { border-left-color: #f6c23e; }
        .stat-card.info { border-left-color: #36b9cc; }
        .stat-card.danger { border-left-color: #e74a3b; }
        
        .stat-content {
            flex: 1;
        }
        
        .stat-label {
            color: #5a5c69;
            font-size: 0.75rem;
            font-weight: 700;
            text-transform: uppercase;
            margin-bottom: 0.25rem;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #5a5c69;
        }
        
        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-left: 1rem;
        }
        
        .stat-icon.primary { background: rgba(78, 115, 223, 0.1); color: #4e73df; }
        .stat-icon.success { background: rgba(28, 200, 138, 0.1); color: #1cc88a; }
        .stat-icon.warning { background: rgba(246, 194, 62, 0.1); color: #f6c23e; }
        .stat-icon.info { background: rgba(54, 185, 204, 0.1); color: #36b9cc; }
        .stat-icon.danger { background: rgba(231, 74, 59, 0.1); color: #e74a3b; }
        
        /* Tables */
        .table-responsive {
            overflow-x: auto;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 0;
        }
        
        .table th,
        .table td {
            padding: 0.75rem;
            vertical-align: top;
            border-top: 1px solid #e3e6f0;
            text-align: left;
        }
        
        .table thead th {
            background: #f8f9fc;
            border-bottom: 2px solid #e3e6f0;
            border-top: 0;
            font-weight: 700;
            color: #5a5c69;
            font-size: 0.875rem;
        }
        
        .table tbody tr:hover {
            background: #f8f9fc;
        }
        
        /* Schedule specific styles */
        .schedule-slot {
            margin-bottom: 0.75rem;
            padding: 0.75rem;
            border-radius: 6px;
            border-left: 4px solid;
            background: white;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        .schedule-slot.temporary {
            border-left-color: #f6c23e;
            background: #fff9e6;
        }
        
        .schedule-slot.permanent {
            border-left-color: #4e73df;
            background: #f0f4ff;
        }
        
        .schedule-time {
            font-weight: 700;
            color: #2e59d9;
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
        }
        
        .schedule-room {
            color: #5a5c69;
            font-size: 0.75rem;
            margin-bottom: 0.25rem;
        }
        
        .schedule-subject {
            color: #3d3d3d;
            font-weight: 600;
            font-size: 0.8rem;
            margin-bottom: 0.25rem;
        }
        
        .schedule-teacher {
            color: #858796;
            font-size: 0.7rem;
        }
        
        .schedule-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            font-size: 0.65rem;
            font-weight: 700;
            border-radius: 0.35rem;
            text-transform: uppercase;
        }
        
        .schedule-badge.temporary {
            background: #f6c23e;
            color: #8a6914;
        }
        
        .schedule-badge.permanent {
            background: #4e73df;
            color: white;
        }
        
        /* Buttons */
        .btn {
            display: inline-block;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            font-weight: 600;
            line-height: 1.5;
            text-align: center;
            vertical-align: middle;
            cursor: pointer;
            user-select: none;
            border: 1px solid transparent;
            border-radius: 0.35rem;
            transition: all 0.15s ease-in-out;
            text-decoration: none;
        }
        
        .btn-primary {
            color: white;
            background: #4e73df;
            border-color: #4e73df;
        }
        
        .btn-primary:hover {
            background: #2e59d9;
            border-color: #2653d4;
        }
        
        .btn-success {
            color: white;
            background: #1cc88a;
            border-color: #1cc88a;
        }
        
        .btn-success:hover {
            background: #17a673;
            border-color: #169b6b;
        }
        
        .btn-warning {
            color: #fff;
            background: #f6c23e;
            border-color: #f6c23e;
        }
        
        .btn-warning:hover {
            background: #f4b619;
            border-color: #f4b30d;
        }
        
        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
        }
        
        /* Status indicators */
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.875rem;
            font-weight: 600;
        }
        
        .status-indicator.connected {
            background: rgba(28, 200, 138, 0.1);
            color: #1cc88a;
            border: 1px solid rgba(28, 200, 138, 0.2);
        }
        
        .status-indicator.disconnected {
            background: rgba(231, 74, 59, 0.1);
            color: #e74a3b;
            border: 1px solid rgba(231, 74, 59, 0.2);
        }
        
        .status-indicator.unknown {
            background: rgba(133, 135, 150, 0.1);
            color: #858796;
            border: 1px solid rgba(133, 135, 150, 0.2);
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        
        .status-dot.connected { background: #1cc88a; }
        .status-dot.disconnected { background: #e74a3b; }
        .status-dot.unknown { background: #858796; }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 3rem 1.5rem;
            color: #858796;
        }
        
        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
        
        .empty-state h3 {
            margin-bottom: 0.5rem;
            color: #5a5c69;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                margin-left: -280px;
                transition: margin-left 0.3s;
            }
            
            .main {
                margin-left: 0;
            }
            
            .card-row {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="wrapper">
        <!-- Sidebar -->
        <nav class="sidebar">
            <a class="sidebar-brand" href="/">
                <div class="brand-icon">
                    📊
                </div>
                <span>SchedulerDashboard</span>
            </a>
            
            <div class="sidebar-nav">
                <div class="nav-item">
                    <a class="nav-link active" href="/">
                        <i data-feather="sliders"></i>
                        <span>Dashboard</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a class="nav-link" href="#schedules">
                        <i data-feather="calendar"></i>
                        <span>Schedules</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a class="nav-link" href="#bridge">
                        <i data-feather="activity"></i>
                        <span>MQTT Bridge</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a class="nav-link" href="#analytics">
                        <i data-feather="bar-chart-2"></i>
                        <span>Analytics</span>
                    </a>
                </div>
                <div class="nav-item">
                    <a class="nav-link" href="#settings">
                        <i data-feather="settings"></i>
                        <span>Settings</span>
                    </a>
                </div>
            </div>
        </nav>
        
        <!-- Main content -->
        <main class="main">
            <div class="topbar">
                <h1 class="topbar-title">Scheduler Dashboard</h1>
                <div class="topbar-actions">
                    <div class="user-info">
                        <span>Database: <%= dbInfo %></span>
                        <div class="avatar">DB</div>
                    </div>
                </div>
            </div>
            
            <div class="content">
                <!-- Stats Cards -->
                <div class="card-row">
                    <div class="stat-card">
                        <div class="stat-content">
                            <div class="stat-label">Total Schedules</div>
                            <div class="stat-number"><%= scheduleStats.totalSchedules %></div>
                        </div>
                        <div class="stat-icon primary">
                            <i data-feather="calendar"></i>
                        </div>
                    </div>
                    
                    <div class="stat-card success">
                        <div class="stat-content">
                            <div class="stat-label">Schedule Slots</div>
                            <div class="stat-number"><%= scheduleStats.totalSlots %></div>
                        </div>
                        <div class="stat-icon success">
                            <i data-feather="clock"></i>
                        </div>
                    </div>
                    
                    <div class="stat-card warning">
                        <div class="stat-content">
                            <div class="stat-label">Temporary Slots</div>
                            <div class="stat-number"><%= scheduleStats.tempSchedules %></div>
                        </div>
                        <div class="stat-icon warning">
                            <i data-feather="alert-circle"></i>
                        </div>
                    </div>
                    
                    <div class="stat-card success">
                        <div class="stat-content">
                            <div class="stat-label">Running Jobs</div>
                            <div class="stat-number"><%= scheduleStats.runningJobs || 0 %></div>
                        </div>
                        <div class="stat-icon success">
                            <i data-feather="activity"></i>
                        </div>
                    </div>
                    
                    <div class="stat-card danger">
                        <div class="stat-content">
                            <div class="stat-label">Cancelled Slots</div>
                            <div class="stat-number"><%= scheduleStats.cancelledSlots || 0 %></div>
                        </div>
                        <div class="stat-icon danger">
                            <i data-feather="x-circle"></i>
                        </div>
                    </div>
                    
                    <div class="stat-card info" id="bridgeStatusCard">
                        <div class="stat-content">
                            <div class="stat-label">MQTT Bridge</div>
                            <div class="stat-number" id="bridgeStatusText">Loading...</div>
                        </div>
                        <div class="stat-icon info" id="bridgeStatusIndicator">
                            <i data-feather="activity"></i>
                        </div>
                    </div>
                </div>
                
                <!-- MQTT Bridge Status -->
                <div class="card-row">
                    <div class="card" style="grid-column: span 2;">
                        <div class="card-header">
                            <h5 class="card-title">
                                <i data-feather="wifi"></i>
                                MQTT Bridge Connection Topics
                            </h5>
                        </div>
                        <div class="card-body">
                            <div style="padding: 1rem; background: #f8f9fc; border-radius: 8px; margin-bottom: 1rem;">
                                <h6 style="color: #5a5c69; margin-bottom: 0.75rem;">Bridge Topics Configuration:</h6>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; font-family: 'Courier New', monospace; font-size: 0.875rem;">
                                    <div>
                                        <strong style="color: #1cc88a;">INCOMING TOPICS:</strong><br>
                                        <div style="color: #5a5c69; margin-top: 0.5rem; line-height: 1.4;">
                                            • bypass_room_sched/#<br>
                                            • turn_on/#, turn_off/#<br>
                                            • collect_schedule<br>
                                            • toggle_bypass/#<br>
                                            • schedule_update/#<br>
                                            • schedule_temp_update/#<br>
                                            • set_minute_to_warn<br>
                                            • set_settings
                                        </div>
                                    </div>
                                    <div>
                                        <strong style="color: #4e73df;">OUTGOING TOPICS:</strong><br>
                                        <div style="color: #5a5c69; margin-top: 0.5rem; line-height: 1.4;">
                                            • active/#<br>
                                            • node_heartbeat<br>
                                            • room_status/#<br>
                                            • heart_pulse/#<br>
                                            • settings/#<br>
                                            • hub_heartbeat
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="text-align: center;">
                                <button class="btn btn-primary btn-sm" onclick="testBridgeConnection()" style="margin-right: 0.5rem;">
                                    <i data-feather="zap" style="width: 14px; height: 14px; margin-right: 4px;"></i>
                                    Test Bridge Connection
                                </button>
                                <button class="btn btn-success btn-sm" onclick="publishMessage()">
                                    <i data-feather="send" style="width: 14px; height: 14px; margin-right: 4px;"></i>
                                    Publish Test Message
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title">
                                <i data-feather="activity"></i>
                                MQTT Bridge Monitor
                            </h5>
                        </div>
                        <div class="card-body">
                            <div id="bridgeDetails" style="margin-bottom: 1rem;">
                                <div class="status-indicator unknown" id="bridgeStatusIndicatorFull">
                                    <div class="status-dot unknown"></div>
                                    <span id="bridgeState">Unknown</span>
                                </div>
                            </div>
                            
                            <div style="font-size: 0.875rem; color: #858796; margin-bottom: 1rem;">
                                <div><strong>Last Update:</strong> <span id="bridgeLastUpdate">Never</span></div>
                                <div><strong>Remote:</strong> mosquitto_remote:1883</div>
                                <div><strong>User:</strong> denver</div>
                            </div>
                            
                            <div style="margin-bottom: 1rem;">
                                <h6 style="color: #5a5c69; margin-bottom: 0.5rem;">Connection History:</h6>
                                <div id="connectionHistory" style="max-height: 150px; overflow-y: auto; font-size: 0.8rem;">
                                    <p style="color: #858796; font-style: italic;">Loading...</p>
                                </div>
                            </div>
                            
                            <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                                <button class="btn btn-primary btn-sm" onclick="refreshBridgeStatus()">
                                    <i data-feather="refresh-cw" style="width: 14px; height: 14px; margin-right: 4px;"></i>
                                    Refresh
                                </button>
                                <button class="btn btn-success btn-sm" onclick="testBridgeConnection()">
                                    <i data-feather="zap" style="width: 14px; height: 14px; margin-right: 4px;"></i>
                                    Test
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
        
        <div class="content-section">
            <div class="section-header">
                � Weekly Schedule Overview
            </div>
            <div style="padding: 20px; overflow-x: auto;">
                <% if (Object.keys(weeklySchedule).every(day => weeklySchedule[day].length === 0)) { %>
                    <div class="empty-state">
                        <div class="empty-icon">�</div>
                        <h3>No schedules found</h3>
                        <p>No schedule slots are currently in the database.</p>
                    </div>
                <% } else { %>
                    <table style="width: 100%; border-collapse: collapse; min-width: 1200px;">
                        <thead>
                            <tr style="background: #f8f9fa;">
                                <th style="padding: 15px; text-align: left; border: 1px solid #ddd; font-weight: 600; color: #333;">Monday</th>
                                <th style="padding: 15px; text-align: left; border: 1px solid #ddd; font-weight: 600; color: #333;">Tuesday</th>
                                <th style="padding: 15px; text-align: left; border: 1px solid #ddd; font-weight: 600; color: #333;">Wednesday</th>
                                <th style="padding: 15px; text-align: left; border: 1px solid #ddd; font-weight: 600; color: #333;">Thursday</th>
                                <th style="padding: 15px; text-align: left; border: 1px solid #ddd; font-weight: 600; color: #333;">Friday</th>
                                <th style="padding: 15px; text-align: left; border: 1px solid #ddd; font-weight: 600; color: #333;">Saturday</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr style="vertical-align: top;">
                                <% ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].forEach(day => { %>
                                    <td style="padding: 15px; border: 1px solid #ddd; width: 16.66%;">
                                        <% if (weeklySchedule[day] && weeklySchedule[day].length > 0) { %>
                                            <% weeklySchedule[day].forEach(slot => { %>
                                                <% if (slot.is_temporary) { %>
                                                    <div style="margin-bottom: 10px; padding: 10px; border-radius: 8px; background: #fff3cd; border-left: 4px solid #ffc107;">
                                                <% } else { %>
                                                    <div style="margin-bottom: 10px; padding: 10px; border-radius: 8px; background: #e3f2fd; border-left: 4px solid #007bff;">
                                                <% } %>
                                                    <div style="font-weight: bold; color: #333; margin-bottom: 5px;">
                                                        <%= slot.start_time %> - <%= slot.end_time %>
                                                    </div>
                                                    <div style="font-size: 0.9rem; color: #666; margin-bottom: 3px;">
                                                        📍 <%= slot.room_id %>
                                                    </div>
                                                    <% if (slot.subject) { %>
                                                        <div style="font-size: 0.9rem; color: #333; margin-bottom: 3px;">
                                                            📚 <%= slot.subject %>
                                                        </div>
                                                    <% } %>
                                                    <% if (slot.teacher) { %>
                                                        <div style="font-size: 0.8rem; color: #666;">
                                                            👨‍🏫 <%= slot.teacher %>
                                                        </div>
                                                    <% } %>
                                                    <% if (slot.is_temporary) { %>
                                                        <div style="font-size: 0.8rem; color: #856404; margin-top: 5px; font-weight: 500;">
                                                            ⏰ Temporary
                                                        </div>
                                                    <% } %>
                                                </div>
                                            <% }); %>
                                        <% } else { %>
                                            <div style="text-align: center; color: #999; font-style: italic; padding: 20px;">
                                                No classes scheduled
                                            </div>
                                        <% } %>
                                    </td>
                                <% }); %>
                            </tr>
                        </tbody>
                    </table>
                <% } %>
            </div>
        </div>
            </div>
        </main>
    </div>

    <!-- Feather Icons Script -->
    <script src="https://unpkg.com/feather-icons"></script>
    <script>
        // Initialize Feather icons
        feather.replace();
    </script>
    <script>
        // Bridge status monitoring
        async function updateBridgeStatus() {
            try {
                const response = await fetch('/api/bridge-status');
                const bridgeData = await response.json();
                
                const bridge = bridgeData.mosquitto_local_test;
                const statusCard = document.getElementById('bridgeStatusCard');
                const statusText = document.getElementById('bridgeStatusText');
                const bridgeState = document.getElementById('bridgeState');
                const bridgeLastUpdate = document.getElementById('bridgeLastUpdate');
                const bridgeStatusIndicatorFull = document.getElementById('bridgeStatusIndicatorFull');
                const connectionHistory = document.getElementById('connectionHistory');
                
                if (bridge) {
                    // Update status card with AdminKit colors
                    if (bridge.connected) {
                        statusText.innerHTML = 'Connected';
                        statusCard.classList.remove('info', 'danger');
                        statusCard.classList.add('success');
                        if (bridgeState) bridgeState.innerHTML = 'Connected';
                        if (bridgeStatusIndicatorFull) {
                            bridgeStatusIndicatorFull.className = 'status-indicator connected';
                            bridgeStatusIndicatorFull.querySelector('.status-dot').className = 'status-dot connected';
                            bridgeStatusIndicatorFull.querySelector('span').textContent = 'Connected';
                        }
                    } else if (bridge.state === 'disconnected') {
                        statusText.innerHTML = 'Disconnected';
                        statusCard.classList.remove('info', 'success');
                        statusCard.classList.add('danger');
                        if (bridgeState) bridgeState.innerHTML = 'Disconnected';
                        if (bridgeStatusIndicatorFull) {
                            bridgeStatusIndicatorFull.className = 'status-indicator disconnected';
                            bridgeStatusIndicatorFull.querySelector('.status-dot').className = 'status-dot disconnected';
                            bridgeStatusIndicatorFull.querySelector('span').textContent = 'Disconnected';
                        }
                    } else {
                        statusText.innerHTML = bridge.state || 'Unknown';
                        statusCard.classList.remove('success', 'danger');
                        statusCard.classList.add('info');
                        if (bridgeState) bridgeState.innerHTML = bridge.state || 'Unknown';
                        if (bridgeStatusIndicatorFull) {
                            bridgeStatusIndicatorFull.className = 'status-indicator unknown';
                            bridgeStatusIndicatorFull.querySelector('.status-dot').className = 'status-dot unknown';
                            bridgeStatusIndicatorFull.querySelector('span').textContent = bridge.state || 'Unknown';
                        }
                    }
                    
                    // Update last update time
                    if (bridgeLastUpdate) {
                        if (bridge.lastUpdate) {
                            const updateTime = new Date(bridge.lastUpdate);
                            bridgeLastUpdate.innerHTML = updateTime.toLocaleString();
                        } else {
                            bridgeLastUpdate.innerHTML = 'Never';
                        }
                    }
                    
                    // Update connection history
                    if (connectionHistory && bridge.connectionHistory && bridge.connectionHistory.length > 0) {
                        const historyHtml = bridge.connectionHistory.map(entry => {
                            const timestamp = new Date(entry.timestamp).toLocaleString();
                            const stateColor = entry.state === 'connected' ? '#1cc88a' : 
                                             entry.state === 'disconnected' ? '#e74a3b' : 
                                             entry.state === 'connecting' ? '#f6c23e' : '#858796';
                            return `
                                <div style="padding: 6px; border-left: 3px solid ${stateColor}; margin-bottom: 4px; background: #f8f9fc; border-radius: 4px; font-size: 0.75rem;">
                                    <div style="color: #5a5c69; font-weight: 600;">${entry.state.toUpperCase()}</div>
                                    <div style="color: #858796;">${timestamp}</div>
                                    ${entry.message ? `<div style="color: #6c757d; margin-top: 2px;">${entry.message}</div>` : ''}
                                </div>
                            `;
                        }).join('');
                        connectionHistory.innerHTML = historyHtml;
                    } else if (connectionHistory) {
                        connectionHistory.innerHTML = '<p style="color: #858796; font-style: italic; font-size: 0.8rem;">No connection history available</p>';
                    }
                    
                } else {
                    statusText.innerHTML = 'No Data';
                    statusCard.classList.remove('success', 'danger');
                    statusCard.classList.add('info');
                    if (bridgeState) bridgeState.innerHTML = 'No Data';
                    if (bridgeStatusIndicatorFull) {
                        bridgeStatusIndicatorFull.className = 'status-indicator unknown';
                        bridgeStatusIndicatorFull.querySelector('.status-dot').className = 'status-dot unknown';
                        bridgeStatusIndicatorFull.querySelector('span').textContent = 'No Data';
                    }
                    if (connectionHistory) connectionHistory.innerHTML = '<p style="color: #858796; font-style: italic; font-size: 0.8rem;">No bridge data available</p>';
                }
                
            } catch (error) {
                console.error('Error fetching bridge status:', error);
                if (statusText) statusText.innerHTML = 'Error';
                if (statusCard) {
                    statusCard.classList.remove('success', 'info');
                    statusCard.classList.add('danger');
                }
                if (connectionHistory) connectionHistory.innerHTML = '<p style="color: #e74a3b; font-size: 0.8rem;">Error loading connection history</p>';
            }
        }
        
        async function testBridgeConnection() {
            const button = event.target;
            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '⏳ Testing...';
            
            try {
                // Publish a test message that should go through the bridge
                const response = await fetch('/publish', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        topic: 'hub_heartbeat', 
                        message: JSON.stringify({
                            timestamp: Date.now(),
                            test: true,
                            source: 'dashboard'
                        })
                    })
                });
                
                if (response.ok) {
                    button.innerHTML = '✅ Test Sent';
                } else {
                    button.innerHTML = '❌ Test Failed';
                }
            } catch (error) {
                button.innerHTML = '❌ Error';
            }
            
            setTimeout(() => {
                button.innerHTML = originalText;
                button.disabled = false;
            }, 3000);
        }
        
        async function refreshBridgeStatus() {
            const button = event.target;
            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '⏳ Refreshing...';
            
            await updateBridgeStatus();
            
            setTimeout(() => {
                button.innerHTML = originalText;
                button.disabled = false;
            }, 1000);
        }
        
        async function publishMessage() {
            const button = document.querySelector('.publish-button');
            
            if (!button) return;
            
            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '⏳ Publishing...';
            
            try {
                const response = await fetch('/publish', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        topic: 'test', 
                        message: 'Hello from Dashboard!' 
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    button.innerHTML = '✅ Published!';
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.disabled = false;
                    }, 2000);
                } else {
                    button.innerHTML = '❌ Failed';
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.disabled = false;
                    }, 2000);
                }
            } catch (error) {
                button.innerHTML = '❌ Error';
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 2000);
            }
        }
        
        // Slot management functions
        async function triggerSlot(roomId, startTime, endTime) {
            const button = event.target;
            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '⏳ Triggering...';
            
            try {
                const response = await fetch('/api/trigger-slot', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        room_id: roomId,
                        start_time: startTime,
                        end_time: endTime,
                        trigger_type: 'manual'
                    })
                });
                
                if (response.ok) {
                    button.innerHTML = '✅ Triggered';
                    setTimeout(() => window.location.reload(), 2000);
                } else {
                    button.innerHTML = '❌ Failed';
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.disabled = false;
                    }, 3000);
                }
            } catch (error) {
                button.innerHTML = '❌ Error';
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 3000);
            }
        }
        
        async function cancelSlot(roomId, startTime, endTime) {
            const button = event.target;
            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '⏳ Cancelling...';
            
            try {
                const response = await fetch('/api/cancel-slot', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        room_id: roomId,
                        start_time: startTime,
                        end_time: endTime,
                        cancel_type: 'manual'
                    })
                });
                
                if (response.ok) {
                    button.innerHTML = '✅ Cancelled';
                    setTimeout(() => window.location.reload(), 2000);
                } else {
                    button.innerHTML = '❌ Failed';
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.disabled = false;
                    }, 3000);
                }
            } catch (error) {
                button.innerHTML = '❌ Error';
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 3000);
            }
        }
        
        // Update bridge status every 5 seconds
        updateBridgeStatus();
        setInterval(updateBridgeStatus, 5000);
    </script>
</body>
</html>
